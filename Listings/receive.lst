C51 COMPILER V9.54   RECEIVE                                                               02/05/2016 20:02:06 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE RECEIVE
OBJECT MODULE PLACED IN .\Objects\receive.obj
COMPILER INVOKED BY: D:\Programmes\Programmes\C51\BIN\C51.EXE ..\..\..\sem6\EE344\Microprocessors-Mini-Project\Microproc
                    -essors-Mini-Project\receive.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\receive.lst) TABS(2) OBJECT(.
                    -\Objects\receive.obj)

line level    source

   1          #include "at89c5131.h"
   2          // #include <regx51.h> 
   3          #include <math.h>
   4          #include <stdio.h>
   5          #include <string.h>
   6          #include <stdlib.h>
   7          #include "lcd.c"
   8          
   9          sbit mot1 = P0^4; 
  10          sbit mot2 = P0^5; 
  11          sbit mot3 = P0^6; 
  12          sbit mot4 = P0^7; 
  13          sbit LED = P1^4;
  14          
  15          char c[40] = {'0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0',
             -'0','0','0','0','0','0','0','0','0','0','0','0','0','0','0',}; 
  16          
  17          
  18          // char lower[16] = {'0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'};
  19          // char upper[16] = {'0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0'};
  20          
  21          char xAxis[5] = {'0','0','0','0','0'};
  22          char yAxis[5] = {'0','0','0','0','0'};
  23          char zAxis[5] = {'0','0','0','0','0'};
  24          
  25          int PWM_Pin = 0;       // Pin P2.0 is named as PWM_Pin
  26          unsigned char speed_state =0;
  27          
  28          // Function declarations
  29          void InitTimer0(void);
  30          void InitPWM(void);
  31          
  32          // Global variables
  33          unsigned char PWM = 0;    // It can have a value from 0 (0% duty cycle) to 255 (100% duty cycle)
  34          unsigned int temp = 0;    // Used inside Timer0 ISR
  35          
  36          // PWM frequency selector
  37          /* PWM_Freq_Num can have values in between 1 to 257 only
  38           * When PWM_Freq_Num is equal to 1, then it means highest PWM frequency
  39           * which is approximately 1000000/(1*255) = 3.9kHz
  40           * When PWM_Freq_Num is equal to 257, then it means lowest PWM frequency
  41           * which is approximately 1000000/(257*255) = 15Hz
  42           *
  43           * So, in general you can calculate PWM frequency by using the formula
  44           *     PWM Frequency = 1000000/(PWM_Freq_Num*255)
  45           */
  46          #define PWM_Freq_Num   1   // Highest possible PWM Frequency
  47          
  48          
  49          // Timer0 initialize
  50          void InitTimer0(void)
  51          {
  52   1        TMOD &= 0xF0;    // Clear 4bit field for timer0
C51 COMPILER V9.54   RECEIVE                                                               02/05/2016 20:02:06 PAGE 2   

  53   1        TMOD |= 0x02;    // Set timer0 in mode 1 = 16bit mode
  54   1        
  55   1        TH0 = 0x00;      // First time value
  56   1        TL0 = 0x00;      // Set arbitrarily zero
  57   1        
  58   1        TH0  = 0xE7;// - (temp>>8)&0xFF;
  59   1        TL0  = 0x00;// - temp&0xFF; 
  60   1      
  61   1        ET0 = 1;         // Enable Timer0 interrupts
  62   1        EA  = 1;         // Global interrupt enable
  63   1        
  64   1        TR0 = 1;         // Start Timer 0
  65   1      }
  66          
  67          
  68          // PWM initialize
  69          void InitPWM(void)
  70          {
  71   1        // PWM = 0;         // Initialize with 0% duty cycle
  72   1        InitTimer0();    // Initialize timer0 to start generating interrupts
  73   1                 // PWM generation code is written inside the Timer0 ISR
  74   1      }
  75          
  76          // Timer0 ISR
  77          void Timer0_ISR (void) interrupt 1   
  78          {
  79   1        // TR0 = 0;    // Stop Timer 0
  80   1      
  81   1        // if(PWM_Pin)  // if PWM_Pin is high
  82   1        // {
  83   1        //  PWM_Pin = 0;
  84   1        //  // temp = (255-PWM)*PWM_Freq_Num;
  85   1        // }
  86   1        // else      // if PWM_Pin is low
  87   1        // {
  88   1        //  PWM_Pin = 1;
  89   1        //  // temp = PWM*PWM_Freq_Num;
  90   1        //  // TH0  = 0xFF;// - (temp>>8)&0xFF;
  91   1        //  // TL0  = 0xFE;// - temp&0xFF;
  92   1        // }
  93   1        if(speed_state == 1)
  94   1        {
  95   2          mot1 = PWM_Pin;
  96   2          mot2 = 0;
  97   2          mot3 = PWM_Pin;
  98   2          mot4 = 0;
  99   2        }
 100   1      
 101   1        else if(speed_state == 2)
 102   1        {
 103   2          mot1 = 0;
 104   2          mot2 = PWM_Pin;
 105   2          mot3 = 0;
 106   2          mot4 = PWM_Pin;
 107   2        }
 108   1      
 109   1        PWM_Pin = ~PWM_Pin;
 110   1        // TH0  = 0x;// - (temp>>8)&0xFF;
 111   1        // TL0  = 0xFE;// - temp&0xFF;  
 112   1        TF0 = 0;     // Clear the interrupt flag
 113   1        TR0 = 1;     // Start Timer 0
 114   1      }
C51 COMPILER V9.54   RECEIVE                                                               02/05/2016 20:02:06 PAGE 3   

 115          
 116          void main()   
 117          {   
 118   1        mot1 = 0;
 119   1        mot2 = 0;
 120   1        mot3 = 0;
 121   1        mot4 = 0;
 122   1        LED = 0;
 123   1        InitPWM();              // Start PWM
 124   1        PWM = 127;              // Make 50% duty cycle of PWM
 125   1      
 126   1        TMOD |=0x20;                                //Choosing Timer mode    
 127   1        TH1=0xF3;                                   //Selecting Baud Rate    
 128   1        PCON |= 0x80;
 129   1        SCON=0x50;                               //Serial mode selection    
 130   1        TR1=1;    
 131   1        // IE=0x90;
 132   1        RI=1;                                      //Enabling Serial Interrupt
 133   1        // printf("Y00000000000000");
 134   1        LCD_Init();  
 135   1        
 136   1        while(1)
 137   1        { 
 138   2          short int p=0;  
 139   2          short int i=0;
 140   2          short int comma[4];
 141   2          short int commaCount=0;
 142   2          float x_acc,y_acc,z_acc;
 143   2          LCD_CmdWrite(0x80);
 144   2          while(SBUF != '>' && p < 40)
 145   2            { 
 146   3              while(RI==0);
 147   3              // while();
 148   3              // c[p] = SBUF;
 149   3              // if(SBUF == ',')
 150   3              //  {
 151   3              //    comma[commaCount] = p;
 152   3              //    commaCount++;
 153   3              //  }
 154   3              // LCD_DataWrite(SBUF);
 155   3              // if(p == 16)
 156   3              // {
 157   3              //  LCD_CmdWrite(0xC0);
 158   3              // }
 159   3              // p++;
 160   3              RI=0;     
 161   3            }
 162   2      
 163   2          while(RI==0);
 164   2          RI=0;     
 165   2      
 166   2          while(SBUF != '>' && p < 40)
 167   2            { 
 168   3              while(RI==0);
 169   3              c[p] = SBUF;
 170   3              // while();
 171   3              if(SBUF == ',')
 172   3                {
 173   4                  comma[commaCount] = p;
 174   4                  commaCount++;
 175   4                }
 176   3              // LCD_DataWrite(c[p]);
C51 COMPILER V9.54   RECEIVE                                                               02/05/2016 20:02:06 PAGE 4   

 177   3              // if(p == 16)
 178   3              // {
 179   3              //  LCD_CmdWrite(0xC0);
 180   3              // }
 181   3              p++;
 182   3              RI=0;     
 183   3            }
 184   2      
 185   2      
 186   2          for(i=comma[1]+1;i<comma[1]+6;i++)
 187   2          {
 188   3            xAxis[i-comma[1]-1]=c[i];
 189   3          }   
 190   2      
 191   2          for(i=comma[2]+1;i<comma[2]+6;i++)
 192   2          {
 193   3            yAxis[i-comma[2]-1]=c[i];
 194   3          }
 195   2      
 196   2          for(i=comma[3]+1;i<comma[3]+6;i++)
 197   2          {
 198   3            zAxis[i-comma[3]-1]=c[i];
 199   3          }
 200   2      
 201   2          x_acc = atof(xAxis);
 202   2          y_acc = atof(yAxis);
 203   2          z_acc = atof(zAxis);
 204   2      
 205   2          // Extracting X, Y, Z
 206   2          // for (int i = 0; i < 40; i++)
 207   2          //      {
 208   2                
 209   2          //      }     
 210   2      
 211   2          // for (i = 0; i < 16; i++)
 212   2          // {
 213   2          //  lower[i] = c[i];
 214   2          //  upper[i] = c[16+i];
 215   2          //  c[16+i] = '0';
 216   2          //  c[i] = '0'; 
 217   2          // }
 218   2          // delay_ms(50);
 219   2          if(fabs(z_acc) > 9)
 220   2          {
 221   3            LCD_DataWrite('0');
 222   3              speed_state = 0;
 223   3              mot1 = 0;
 224   3              mot2 = 0;
 225   3              mot3 = 0;
 226   3              mot4 = 0;
 227   3          }
 228   2          
 229   2          else
 230   2          {
 231   3            if(-y_acc >  2*fabs(x_acc))
 232   3            {
 233   4              if(fabs(z_acc) < 7)
 234   4              {
 235   5                speed_state = 0;
 236   5                LCD_DataWrite('1');
 237   5                mot1 = 1;
 238   5                mot2 = 0;
C51 COMPILER V9.54   RECEIVE                                                               02/05/2016 20:02:06 PAGE 5   

 239   5                mot3 = 1;
 240   5                mot4 = 0; 
 241   5                LED = 1;
 242   5              }
 243   4              else
 244   4              {
 245   5                LCD_DataWrite('f');
 246   5                LED = PWM_Pin;
 247   5                speed_state = 1;
 248   5                // mot1 = PWM_Pin;
 249   5                // mot2 = 0;
 250   5                // mot3 = PWM_Pin;
 251   5                // mot4 = 0;
 252   5      
 253   5              }
 254   4      
 255   4            }
 256   3            else if(-x_acc/2 < -y_acc && -y_acc < 2*(-x_acc))
 257   3            {
 258   4              speed_state = 0;
 259   4              LCD_DataWrite('2');
 260   4              mot1 = 1;
 261   4              mot2 = 0;
 262   4              mot3 = 0;
 263   4              mot4 = 0;
 264   4            }
 265   3            else if(-x_acc > 2*fabs(y_acc))
 266   3            {
 267   4              speed_state = 0;
 268   4              LCD_DataWrite('3');
 269   4              mot1 = 1;
 270   4              mot2 = 0;
 271   4              mot3 = 0;
 272   4              mot4 = 1;
 273   4            }
 274   3            else if(-x_acc/2 < y_acc && y_acc < 2*(-x_acc))
 275   3            {
 276   4              speed_state = 0;
 277   4              LCD_DataWrite('4');
 278   4              mot1 = 0;
 279   4              mot2 = 1;
 280   4              mot3 = 0;
 281   4              mot4 = 0;
 282   4            }
 283   3            else if(y_acc > 2*fabs(x_acc))
 284   3            {
 285   4              if(fabs(z_acc) < 6.5)
 286   4              {
 287   5                speed_state = 0;
 288   5                LCD_DataWrite('5');
 289   5                mot1 = 0;
 290   5                mot2 = 1;
 291   5                mot3 = 0;
 292   5                mot4 = 1;
 293   5              }
 294   4              else
 295   4              {
 296   5                LCD_DataWrite('r');
 297   5                speed_state = 2;
 298   5                // mot1 = 0;
 299   5                // mot2 = PWM_Pin;
 300   5                // mot3 = 0;
C51 COMPILER V9.54   RECEIVE                                                               02/05/2016 20:02:06 PAGE 6   

 301   5                // mot4 = PWM_Pin;
 302   5              }
 303   4      
 304   4            }
 305   3            else if(x_acc/2 < y_acc && y_acc < 2*(x_acc))
 306   3            {
 307   4              speed_state = 0;
 308   4              LCD_DataWrite('6');
 309   4              mot1 = 0;
 310   4              mot2 = 0;
 311   4              mot3 = 0;
 312   4              mot4 = 1;
 313   4            }
 314   3            else if(x_acc > 2*fabs(y_acc))
 315   3            {
 316   4              speed_state = 0;
 317   4              LCD_DataWrite('7');
 318   4              mot1 = 0;
 319   4              mot2 = 1;
 320   4              mot3 = 1;
 321   4              mot4 = 0;
 322   4            }
 323   3            else/*(x_acc/2 < -y_acc && -y_acc < 2*(x_acc))*/
 324   3            {
 325   4              speed_state = 0;
 326   4              LCD_DataWrite('8');
 327   4              mot1 = 0;
 328   4              mot2 = 0;
 329   4              mot3 = 1;
 330   4              mot4 = 0;
 331   4            }
 332   3            // else
 333   3            // {
 334   3            //  LCD_DataWrite('9'); 
 335   3            // }  
 336   3          }
 337   2      
 338   2      
 339   2          // if(x_acc > 2*y_acc)
 340   2          // {
 341   2        //             mot1=1;
 342   2        //             mot2=0;
 343   2          // }
 344   2          
 345   2          // else
 346   2          // {
 347   2        //             mot1=0;
 348   2        //             mot2=1;
 349   2          // }
 350   2          delay_ms(5);
 351   2        }
 352   1      }
 353          
 354          // void ser_intr(void)interrupt 4        //Subroutine for Interrupt  
 355          // {
 356              
 357          // }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1379    ----
   CONSTANT SIZE    =   ----    ----
C51 COMPILER V9.54   RECEIVE                                                               02/05/2016 20:02:06 PAGE 7   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     64      32
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
